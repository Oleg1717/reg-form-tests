plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.9.6'
}

repositories {
    mavenCentral()
}

def allureVersion = '2.17.2',
    selenideVersion = '6.12.4',
    junitVersion = '5.9.2'

allure {
    report {
        version = allureVersion
    }
    adapter {
        autoconfigure = true
        aspectjweaver = true
        frameworks {
            junit5 {
                adapterVersion = allureVersion
            }
        }
    }
}

dependencies {
    testImplementation(
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",
            "org.junit.jupiter:junit-jupiter:$junitVersion",
            "org.junit.platform:junit-platform-engine:1.9.2",
            "com.codeborne:selenide:$selenideVersion",
            "io.qameta.allure:allure-junit5:$allureVersion",
            "com.fasterxml.jackson.core:jackson-databind:2.14.3",
            "org.assertj:assertj-core:3.24.2",
            "org.jsoup:jsoup:1.14.3",
            "org.awaitility:awaitility:4.1.1",
            "com.github.javafaker:javafaker:1.0.2",
            'io.rest-assured:rest-assured:4.1.2',
            'ch.qos.logback:logback-classic:1.3.7',
            "com.codeborne:pdf-test:1.5.1",
            "org.aeonbits.owner:owner:1.0.12")
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks.withType(Test) {
    if (System.getProperty("environment") == null) {
        System.setProperty("environment", "preprod") // choosing preprod, prod
    }
    systemProperties(System.getProperties())
    useJUnitPlatform() {
        excludeTags('system')
    }

    testLogging {
        events "started", "skipped", "passed", "failed", "standard_error", "standard_out"
        exceptionFormat "short"
    }
}